Insertion Sort

Bagaimana Cara Kerja Insertion Sort Secara Konseptual?

Inti dari Insertion Sort
Kita membagi array menjadi 2 bagian:
1. Bagian kiri (terurut)
2. Bagian kanan (belum terurut)

Lalu kita ambil satu per satu elemen dari bagian kanan dan sisipkan ke posisi yang tepat di bagian kiri agar tetap terurut.

Langkah-langkahnya:
Misalnya kita punya array:
[5, 3, 8, 6, 2]
1. Mulai dari elemen ke-2 (karena elemen pertama dianggap sudah terurut)
2. Bandingkan dengan elemen di sebelah kirinya
3. Geser elemen yang lebih besar ke kanan
4. Sisipkan elemen tersebut ke posisi yang sesuai

Langkah 1:
    [5, 3, 8, 6, 2]
    Bandingkan 3 dengan 5
    3 < 5
    Geser 5 -> [5, 5, 8, 6, 5]
    Sisipkan 3 -> [3, 5, 8, 6, 2]

Langkah 2: 
    [3, 5, 8, 6, 2]
    Bandingkan 8 dengan 5
    8 !< 5
    Berati tidak perlu di Geser

Langkah 3:
    [3, 5, 8, 6, 2]
    Bandinkan 6 dengan 8
    6 < 8
    Geser 8 -> [3, 5, 8, 8, 2]
    Sisipkan 6 -> [3, 5, 6, 8, 2]

Langkah 4:
    [3, 5, 6, 8, 2]
    Bandingkan 2 dengan 8
    2 < 8
    Geser 8 -> [3, 5, 6, 8, 8]
    Bandingkan 2 dengan 6
    2 < 6
    Geser 6 -> [3, 5, 6, 6, 8]
    Bandingkan 2 dengan 5
    2 < 5
    Geser 5 -> [3, 5, 5, 6, 8]
    Bandingkan 2 dengan 3
    2 < 3
    Geser 3 -> [3, 3, 5, 6, 8]
    Sisipkan 2 -> [2, 3, 5, 6, 8]


Analogi Sederhana: Menyusun Kartu Remi
Bayangkan kamu sedang main kartu remi dan ingin menyusunnya dari kecil ke besar di tanganmu
1. Ambil kartu satu persatu
2. Setiap kartu yang kamu ambil, kamu cari posisi yang tepat untuk menyisipkannya diantara kartu-kartu yang sudah kamu pegang
3. Kamu geser kartu lain jika perlu supaya kartu yang baru bisa masuk di tempat yang pasti


Kenapa Disebut Insertion Sort?
Karena setiap elemen yang kita proses di sisipkan (inserted) ke posisi yang tepat didalam bagian array yang sudah terurut.

Kita tidak menukar, tapi menyisipkan elemen ke tempat yang sesuai setelah membandingkan dan menggeser elemen lain.

